import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

adjacency_matrix = np.array([
    [0, 1, 1/2, 0],
    [1/2, 0, 1, 1],
    [1, 0, 0, 1],
    [0, 1, 0, 1/2]
])

graph = nx.from_numpy_array(adjacency_matrix, create_using=nx.DiGraph)

nx.draw(graph, with_labels=True, arrows=True)
plt.show()

out_degrees = np.sum(adjacency_matrix, axis=1)

alp = 0.85
markov_matrix = np.zeros(adjacency_matrix.shape)

for i in range(adjacency_matrix.shape[0]):
    for j in range(adjacency_matrix.shape[1]):
        markov_matrix[i][j] = (alp * adjacency_matrix[i][j] / out_degrees[i]) + ((1 - alp) / len(adjacency_matrix))

markov_matrix = np.transpose(markov_matrix)

pagerank_vector = np.ones(adjacency_matrix.shape[0]) / len(adjacency_matrix)

for _ in range(len(markov_matrix)):
    pagerank_vector = np.dot(markov_matrix, pagerank_vector)
print(pagerank_vector)

node_colors = [pagerank_vector[node] for node in graph.nodes()]
sizes = 5000 * pagerank_vector
nx.draw(graph, with_labels=True, arrows=True, node_size=sizes, node_color=node_colors)

plt.show()
